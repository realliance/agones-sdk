// Copyright 2020 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `alpha.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Empty>(
                "Empty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Empty {
        static instance: ::protobuf::rt::LazyV2<Empty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Empty::new)
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Count {
    // message fields
    pub count: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Count {
    fn default() -> &'a Count {
        <Count as ::protobuf::Message>::default_instance()
    }
}

impl Count {
    pub fn new() -> Count {
        ::std::default::Default::default()
    }

    // int64 count = 1;


    pub fn get_count(&self) -> i64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i64) {
        self.count = v;
    }
}

impl ::protobuf::Message for Count {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_int64(1, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Count {
        Count::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "count",
                |m: &Count| { &m.count },
                |m: &mut Count| { &mut m.count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Count>(
                "Count",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Count {
        static instance: ::protobuf::rt::LazyV2<Count> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Count::new)
    }
}

impl ::protobuf::Clear for Count {
    fn clear(&mut self) {
        self.count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Count {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Count {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Bool {
    // message fields
    pub bool: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Bool {
    fn default() -> &'a Bool {
        <Bool as ::protobuf::Message>::default_instance()
    }
}

impl Bool {
    pub fn new() -> Bool {
        ::std::default::Default::default()
    }

    // bool bool = 1;


    pub fn get_bool(&self) -> bool {
        self.bool
    }
    pub fn clear_bool(&mut self) {
        self.bool = false;
    }

    // Param is passed by value, moved
    pub fn set_bool(&mut self, v: bool) {
        self.bool = v;
    }
}

impl ::protobuf::Message for Bool {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.bool = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.bool != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.bool != false {
            os.write_bool(1, self.bool)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Bool {
        Bool::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "bool",
                |m: &Bool| { &m.bool },
                |m: &mut Bool| { &mut m.bool },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Bool>(
                "Bool",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Bool {
        static instance: ::protobuf::rt::LazyV2<Bool> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Bool::new)
    }
}

impl ::protobuf::Clear for Bool {
    fn clear(&mut self) {
        self.bool = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Bool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bool {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerID {
    // message fields
    pub playerID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerID {
    fn default() -> &'a PlayerID {
        <PlayerID as ::protobuf::Message>::default_instance()
    }
}

impl PlayerID {
    pub fn new() -> PlayerID {
        ::std::default::Default::default()
    }

    // string playerID = 1;


    pub fn get_playerID(&self) -> &str {
        &self.playerID
    }
    pub fn clear_playerID(&mut self) {
        self.playerID.clear();
    }

    // Param is passed by value, moved
    pub fn set_playerID(&mut self, v: ::std::string::String) {
        self.playerID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_playerID(&mut self) -> &mut ::std::string::String {
        &mut self.playerID
    }

    // Take field
    pub fn take_playerID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.playerID, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PlayerID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.playerID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.playerID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.playerID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.playerID.is_empty() {
            os.write_string(1, &self.playerID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerID {
        PlayerID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "playerID",
                |m: &PlayerID| { &m.playerID },
                |m: &mut PlayerID| { &mut m.playerID },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerID>(
                "PlayerID",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerID {
        static instance: ::protobuf::rt::LazyV2<PlayerID> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerID::new)
    }
}

impl ::protobuf::Clear for PlayerID {
    fn clear(&mut self) {
        self.playerID.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerID {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerIDList {
    // message fields
    pub list: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerIDList {
    fn default() -> &'a PlayerIDList {
        <PlayerIDList as ::protobuf::Message>::default_instance()
    }
}

impl PlayerIDList {
    pub fn new() -> PlayerIDList {
        ::std::default::Default::default()
    }

    // repeated string list = 1;


    pub fn get_list(&self) -> &[::std::string::String] {
        &self.list
    }
    pub fn clear_list(&mut self) {
        self.list.clear();
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.list
    }

    // Take field
    pub fn take_list(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlayerIDList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.list {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.list {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerIDList {
        PlayerIDList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "list",
                |m: &PlayerIDList| { &m.list },
                |m: &mut PlayerIDList| { &mut m.list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerIDList>(
                "PlayerIDList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerIDList {
        static instance: ::protobuf::rt::LazyV2<PlayerIDList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerIDList::new)
    }
}

impl ::protobuf::Clear for PlayerIDList {
    fn clear(&mut self) {
        self.list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerIDList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerIDList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0balpha.proto\x12\x14agones.dev.sdk.alpha\x1a\x1cgoogle/api/annotati\
    ons.proto\"\x07\n\x05Empty\"\x1d\n\x05Count\x12\x14\n\x05count\x18\x01\
    \x20\x01(\x03R\x05count\"\x1a\n\x04Bool\x12\x12\n\x04bool\x18\x01\x20\
    \x01(\x08R\x04bool\"&\n\x08PlayerID\x12\x1a\n\x08playerID\x18\x01\x20\
    \x01(\tR\x08playerID\"\"\n\x0cPlayerIDList\x12\x12\n\x04list\x18\x01\x20\
    \x03(\tR\x04list2\xa9\x06\n\x03SDK\x12m\n\rPlayerConnect\x12\x1e.agones.\
    dev.sdk.alpha.PlayerID\x1a\x1a.agones.dev.sdk.alpha.Bool\"\x20\x82\xd3\
    \xe4\x93\x02\x1a\"\x15/alpha/player/connect:\x01*\x12s\n\x10PlayerDiscon\
    nect\x12\x1e.agones.dev.sdk.alpha.PlayerID\x1a\x1a.agones.dev.sdk.alpha.\
    Bool\"#\x82\xd3\xe4\x93\x02\x1d\"\x18/alpha/player/disconnect:\x01*\x12p\
    \n\x11SetPlayerCapacity\x12\x1b.agones.dev.sdk.alpha.Count\x1a\x1b.agone\
    s.dev.sdk.alpha.Empty\"!\x82\xd3\xe4\x93\x02\x1b\x1a\x16/alpha/player/ca\
    pacity:\x01*\x12m\n\x11GetPlayerCapacity\x12\x1b.agones.dev.sdk.alpha.Em\
    pty\x1a\x1b.agones.dev.sdk.alpha.Count\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\
    \x16/alpha/player/capacity\x12g\n\x0eGetPlayerCount\x12\x1b.agones.dev.s\
    dk.alpha.Empty\x1a\x1b.agones.dev.sdk.alpha.Count\"\x1b\x82\xd3\xe4\x93\
    \x02\x15\x12\x13/alpha/player/count\x12{\n\x11IsPlayerConnected\x12\x1e.\
    agones.dev.sdk.alpha.PlayerID\x1a\x1a.agones.dev.sdk.alpha.Bool\"*\x82\
    \xd3\xe4\x93\x02$\x12\"/alpha/player/connected/{playerID}\x12w\n\x13GetC\
    onnectedPlayers\x12\x1b.agones.dev.sdk.alpha.Empty\x1a\".agones.dev.sdk.\
    alpha.PlayerIDList\"\x1f\x82\xd3\xe4\x93\x02\x19\x12\x17/alpha/player/co\
    nnectedB\x07Z\x05alphaJ\xd0)\n\x07\x12\x05\x0e\0\x89\x01\x01\n\xd1\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xc6\x04\x20Copyright\x202020\x20Google\x20LL\
    C\x20All\x20Rights\x20Reserved.\n\n\x20Licensed\x20under\x20the\x20Apach\
    e\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20L\
    icense\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICEN\
    SE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agr\
    eed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x1d\
    \n\x08\n\x01\x08\x12\x03\x11\0\x1c\n\t\n\x02\x08\x0b\x12\x03\x11\0\x1c\n\
    \t\n\x02\x03\0\x12\x03\x13\0&\nN\n\x02\x06\0\x12\x04\x16\0q\x01\x1aB\x20\
    SDK\x20service\x20to\x20be\x20used\x20in\x20the\x20GameServer\x20SDK\x20\
    to\x20the\x20Pod\x20Sidecar.\n\n\n\n\x03\x06\0\x01\x12\x03\x16\x08\x0b\n\
    \xbe\x08\n\x04\x06\0\x02\0\x12\x04'\x04,\x05\x1a\xaf\x08\x20PlayerConnec\
    t\x20increases\x20the\x20SDK\xe2\x80\x99s\x20stored\x20player\x20count\
    \x20by\x20one,\x20and\x20appends\x20this\x20playerID\x20to\x20GameServer\
    .Status.Players.IDs.\n\n\x20GameServer.Status.Players.Count\x20and\x20Ga\
    meServer.Status.Players.IDs\x20are\x20then\x20set\x20to\x20update\x20the\
    \x20player\x20count\x20and\x20id\x20list\x20a\x20second\x20from\x20now,\
    \n\x20unless\x20there\x20is\x20already\x20an\x20update\x20pending,\x20in\
    \x20which\x20case\x20the\x20update\x20joins\x20that\x20batch\x20operatio\
    n.\n\n\x20PlayerConnect\x20returns\x20true\x20and\x20adds\x20the\x20play\
    erID\x20to\x20the\x20list\x20of\x20playerIDs\x20if\x20this\x20playerID\
    \x20was\x20not\x20already\x20in\x20the\n\x20list\x20of\x20connected\x20p\
    layerIDs.\n\n\x20If\x20the\x20playerID\x20exists\x20within\x20the\x20lis\
    t\x20of\x20connected\x20playerIDs,\x20PlayerConnect\x20will\x20return\
    \x20false,\x20and\x20the\x20list\x20of\n\x20connected\x20playerIDs\x20wi\
    ll\x20be\x20left\x20unchanged.\n\n\x20An\x20error\x20will\x20be\x20retur\
    ned\x20if\x20the\x20playerID\x20was\x20not\x20already\x20in\x20the\x20li\
    st\x20of\x20connected\x20playerIDs\x20but\x20the\x20player\x20capacity\
    \x20for\n\x20the\x20server\x20has\x20been\x20reached.\x20The\x20playerID\
    \x20will\x20not\x20be\x20added\x20to\x20the\x20list\x20of\x20playerIDs.\
    \n\n\x20Warning:\x20Do\x20not\x20use\x20this\x20method\x20if\x20you\x20a\
    re\x20manually\x20managing\x20GameServer.Status.Players.IDs\x20and\x20Ga\
    meServer.Status.Players.Count\n\x20through\x20the\x20Kubernetes\x20API,\
    \x20as\x20indeterminate\x20results\x20will\x20occur.\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03'\x08\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03'\x17\x1f\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03'*.\n\r\n\x05\x06\0\x02\0\x04\x12\
    \x04(\x08+\n\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04(\x08+\n\n\
    \xda\x06\n\x04\x06\0\x02\x01\x12\x04;\x04@\x05\x1a\xcb\x06\x20Decreases\
    \x20the\x20SDK\xe2\x80\x99s\x20stored\x20player\x20count\x20by\x20one,\
    \x20and\x20removes\x20the\x20playerID\x20from\x20GameServer.Status.Playe\
    rs.IDs.\n\n\x20GameServer.Status.Players.Count\x20and\x20GameServer.Stat\
    us.Players.IDs\x20are\x20then\x20set\x20to\x20update\x20the\x20player\
    \x20count\x20and\x20id\x20list\x20a\x20second\x20from\x20now,\n\x20unles\
    s\x20there\x20is\x20already\x20an\x20update\x20pending,\x20in\x20which\
    \x20case\x20the\x20update\x20joins\x20that\x20batch\x20operation.\n\n\
    \x20PlayerDisconnect\x20will\x20return\x20true\x20and\x20remove\x20the\
    \x20supplied\x20playerID\x20from\x20the\x20list\x20of\x20connected\x20pl\
    ayerIDs\x20if\x20the\n\x20playerID\x20value\x20exists\x20within\x20the\
    \x20list.\n\n\x20If\x20the\x20playerID\x20was\x20not\x20in\x20the\x20lis\
    t\x20of\x20connected\x20playerIDs,\x20the\x20call\x20will\x20return\x20f\
    alse,\x20and\x20the\x20connected\x20playerID\x20list\n\x20will\x20be\x20\
    left\x20unchanged.\n\n\x20Warning:\x20Do\x20not\x20use\x20this\x20method\
    \x20if\x20you\x20are\x20manually\x20managing\x20GameServer.status.player\
    s.IDs\x20and\x20GameServer.status.players.Count\n\x20through\x20the\x20K\
    ubernetes\x20API,\x20as\x20indeterminate\x20results\x20will\x20occur.\n\
    \n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03;\x08\x18\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x03;\x1a\"\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03;-1\n\r\n\
    \x05\x06\0\x02\x01\x04\x12\x04<\x08?\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\
    \xca\xbc\"\x12\x04<\x08?\n\nX\n\x04\x06\0\x02\x02\x12\x04C\x04H\x05\x1aJ\
    \x20Update\x20the\x20GameServer.Status.Players.Capacity\x20value\x20with\
    \x20a\x20new\x20capacity.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03C\x08\
    \x19\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03C\x1b\x20\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03C+0\n\r\n\x05\x06\0\x02\x02\x04\x12\x04D\x08G\n\n\
    \x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04D\x08G\n\n\xe2\x02\n\x04\
    \x06\0\x02\x03\x12\x04N\x04R\x05\x1a\xd3\x02\x20Retrieves\x20the\x20curr\
    ent\x20player\x20capacity.\x20This\x20is\x20always\x20accurate\x20from\
    \x20what\x20has\x20been\x20set\x20through\x20this\x20SDK,\n\x20even\x20i\
    f\x20the\x20value\x20has\x20yet\x20to\x20be\x20updated\x20on\x20the\x20G\
    ameServer\x20status\x20resource.\n\n\x20If\x20GameServer.Status.Players.\
    Capacity\x20is\x20set\x20manually\x20through\x20the\x20Kubernetes\x20API\
    ,\x20use\x20SDK.GameServer()\x20or\x20SDK.WatchGameServer()\x20instead\
    \x20to\x20view\x20this\x20value.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    N\x08\x19\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03N\x1b\x20\n\x0c\n\x05\x06\
    \0\x02\x03\x03\x12\x03N+0\n\r\n\x05\x06\0\x02\x03\x04\x12\x04O\x08Q\n\n\
    \x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04O\x08Q\n\n\xdc\x02\n\x04\
    \x06\0\x02\x04\x12\x04X\x04\\\x05\x1a\xcd\x02\x20Retrieves\x20the\x20cur\
    rent\x20player\x20count.\x20This\x20is\x20always\x20accurate\x20from\x20\
    what\x20has\x20been\x20set\x20through\x20this\x20SDK,\n\x20even\x20if\
    \x20the\x20value\x20has\x20yet\x20to\x20be\x20updated\x20on\x20the\x20Ga\
    meServer\x20status\x20resource.\n\n\x20If\x20GameServer.Status.Players.C\
    ount\x20is\x20set\x20manually\x20through\x20the\x20Kubernetes\x20API,\
    \x20use\x20SDK.GameServer()\x20or\x20SDK.WatchGameServer()\x20instead\
    \x20to\x20view\x20this\x20value.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\
    X\x08\x16\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03X\x18\x1d\n\x0c\n\x05\x06\
    \0\x02\x04\x03\x12\x03X(-\n\r\n\x05\x06\0\x02\x04\x04\x12\x04Y\x08[\n\n\
    \x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04Y\x08[\n\n\x83\x03\n\x04\
    \x06\0\x02\x05\x12\x04b\x04f\x05\x1a\xf4\x02\x20Returns\x20if\x20the\x20\
    playerID\x20is\x20currently\x20connected\x20to\x20the\x20GameServer.\x20\
    This\x20is\x20always\x20accurate\x20from\x20what\x20has\x20been\x20set\
    \x20through\x20this\x20SDK,\n\x20even\x20if\x20the\x20value\x20has\x20ye\
    t\x20to\x20be\x20updated\x20on\x20the\x20GameServer\x20status\x20resourc\
    e.\n\n\x20If\x20GameServer.Status.Players.IDs\x20is\x20set\x20manually\
    \x20through\x20the\x20Kubernetes\x20API,\x20use\x20SDK.GameServer()\x20o\
    r\x20SDK.WatchGameServer()\x20instead\x20to\x20determine\x20connected\
    \x20status.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03b\x08\x19\n\x0c\n\x05\
    \x06\0\x02\x05\x02\x12\x03b\x1b#\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03b.\
    2\n\r\n\x05\x06\0\x02\x05\x04\x12\x04c\x08e\n\n\x11\n\t\x06\0\x02\x05\
    \x04\xb0\xca\xbc\"\x12\x04c\x08e\n\n\xee\x02\n\x04\x06\0\x02\x06\x12\x04\
    l\x04p\x05\x1a\xdf\x02\x20Returns\x20the\x20list\x20of\x20the\x20current\
    ly\x20connected\x20player\x20ids.\x20This\x20is\x20always\x20accurate\
    \x20from\x20what\x20has\x20been\x20set\x20through\x20this\x20SDK,\n\x20e\
    ven\x20if\x20the\x20value\x20has\x20yet\x20to\x20be\x20updated\x20on\x20\
    the\x20GameServer\x20status\x20resource.\n\n\x20If\x20GameServer.Status.\
    Players.IDs\x20is\x20set\x20manually\x20through\x20the\x20Kubernetes\x20\
    API,\x20use\x20SDK.GameServer()\x20or\x20SDK.WatchGameServer()\x20instea\
    d\x20to\x20view\x20this\x20value.\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\
    \x03l\x08\x1b\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03l\x1c!\n\x0c\n\x05\
    \x06\0\x02\x06\x03\x12\x03l,8\n\r\n\x05\x06\0\x02\x06\x04\x12\x04m\x08o\
    \n\n\x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x04m\x08o\n\n\x18\n\x02\
    \x04\0\x12\x04t\0u\x01\x1a\x0c\x20I\x20am\x20Empty\n\n\n\n\x03\x04\0\x01\
    \x12\x03t\x08\r\n%\n\x02\x04\x01\x12\x04x\0z\x01\x1a\x19\x20Store\x20a\
    \x20count\x20variable.\n\n\n\n\x03\x04\x01\x01\x12\x03x\x08\r\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03y\x04\x14\n\r\n\x05\x04\x01\x02\0\x04\x12\x04y\
    \x04x\x0f\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03y\x04\t\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03y\n\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03y\x12\
    \x13\n$\n\x02\x04\x02\x12\x04}\0\x7f\x01\x1a\x18\x20Store\x20a\x20boolea\
    n\x20result\n\n\n\n\x03\x04\x02\x01\x12\x03}\x08\x0c\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03~\x04\x12\n\r\n\x05\x04\x02\x02\0\x04\x12\x04~\x04}\x0e\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03~\x04\x08\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03~\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03~\x10\x11\n9\n\
    \x02\x04\x03\x12\x06\x82\x01\0\x84\x01\x01\x1a+\x20The\x20unique\x20iden\
    tifier\x20for\x20a\x20given\x20player.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\
    \x82\x01\x08\x10\n\x0c\n\x04\x04\x03\x02\0\x12\x04\x83\x01\x04\x18\n\x0f\
    \n\x05\x04\x03\x02\0\x04\x12\x06\x83\x01\x04\x82\x01\x12\n\r\n\x05\x04\
    \x03\x02\0\x05\x12\x04\x83\x01\x04\n\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\
    \x83\x01\x0b\x13\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x83\x01\x16\x17\n\"\
    \n\x02\x04\x04\x12\x06\x87\x01\0\x89\x01\x01\x1a\x14\x20List\x20of\x20Pl\
    ayer\x20IDs\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x87\x01\x08\x14\n\x0c\n\
    \x04\x04\x04\x02\0\x12\x04\x88\x01\x04\x1d\n\r\n\x05\x04\x04\x02\0\x04\
    \x12\x04\x88\x01\x04\x0c\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\x88\x01\r\
    \x13\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x88\x01\x14\x18\n\r\n\x05\x04\
    \x04\x02\0\x03\x12\x04\x88\x01\x1b\x1cb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
