// Copyright 2020 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sdk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Empty>(
                "Empty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Empty {
        static instance: ::protobuf::rt::LazyV2<Empty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Empty::new)
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KeyValue {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyValue {
    fn default() -> &'a KeyValue {
        <KeyValue as ::protobuf::Message>::default_instance()
    }
}

impl KeyValue {
    pub fn new() -> KeyValue {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for KeyValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyValue {
        KeyValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &KeyValue| { &m.key },
                |m: &mut KeyValue| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &KeyValue| { &m.value },
                |m: &mut KeyValue| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KeyValue>(
                "KeyValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KeyValue {
        static instance: ::protobuf::rt::LazyV2<KeyValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyValue::new)
    }
}

impl ::protobuf::Clear for KeyValue {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Duration {
    // message fields
    pub seconds: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Duration {
    fn default() -> &'a Duration {
        <Duration as ::protobuf::Message>::default_instance()
    }
}

impl Duration {
    pub fn new() -> Duration {
        ::std::default::Default::default()
    }

    // int64 seconds = 1;


    pub fn get_seconds(&self) -> i64 {
        self.seconds
    }
    pub fn clear_seconds(&mut self) {
        self.seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_seconds(&mut self, v: i64) {
        self.seconds = v;
    }
}

impl ::protobuf::Message for Duration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.seconds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seconds != 0 {
            my_size += ::protobuf::rt::value_size(1, self.seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.seconds != 0 {
            os.write_int64(1, self.seconds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Duration {
        Duration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "seconds",
                |m: &Duration| { &m.seconds },
                |m: &mut Duration| { &mut m.seconds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Duration>(
                "Duration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Duration {
        static instance: ::protobuf::rt::LazyV2<Duration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Duration::new)
    }
}

impl ::protobuf::Clear for Duration {
    fn clear(&mut self) {
        self.seconds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Duration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Duration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameServer {
    // message fields
    pub object_meta: ::protobuf::SingularPtrField<GameServer_ObjectMeta>,
    pub spec: ::protobuf::SingularPtrField<GameServer_Spec>,
    pub status: ::protobuf::SingularPtrField<GameServer_Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameServer {
    fn default() -> &'a GameServer {
        <GameServer as ::protobuf::Message>::default_instance()
    }
}

impl GameServer {
    pub fn new() -> GameServer {
        ::std::default::Default::default()
    }

    // .agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;


    pub fn get_object_meta(&self) -> &GameServer_ObjectMeta {
        self.object_meta.as_ref().unwrap_or_else(|| <GameServer_ObjectMeta as ::protobuf::Message>::default_instance())
    }
    pub fn clear_object_meta(&mut self) {
        self.object_meta.clear();
    }

    pub fn has_object_meta(&self) -> bool {
        self.object_meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object_meta(&mut self, v: GameServer_ObjectMeta) {
        self.object_meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_meta(&mut self) -> &mut GameServer_ObjectMeta {
        if self.object_meta.is_none() {
            self.object_meta.set_default();
        }
        self.object_meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_object_meta(&mut self) -> GameServer_ObjectMeta {
        self.object_meta.take().unwrap_or_else(|| GameServer_ObjectMeta::new())
    }

    // .agones.dev.sdk.GameServer.Spec spec = 2;


    pub fn get_spec(&self) -> &GameServer_Spec {
        self.spec.as_ref().unwrap_or_else(|| <GameServer_Spec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: GameServer_Spec) {
        self.spec = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut GameServer_Spec {
        if self.spec.is_none() {
            self.spec.set_default();
        }
        self.spec.as_mut().unwrap()
    }

    // Take field
    pub fn take_spec(&mut self) -> GameServer_Spec {
        self.spec.take().unwrap_or_else(|| GameServer_Spec::new())
    }

    // .agones.dev.sdk.GameServer.Status status = 3;


    pub fn get_status(&self) -> &GameServer_Status {
        self.status.as_ref().unwrap_or_else(|| <GameServer_Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: GameServer_Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut GameServer_Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> GameServer_Status {
        self.status.take().unwrap_or_else(|| GameServer_Status::new())
    }
}

impl ::protobuf::Message for GameServer {
    fn is_initialized(&self) -> bool {
        for v in &self.object_meta {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.spec {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.object_meta)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.spec)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.object_meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.object_meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.spec.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameServer {
        GameServer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameServer_ObjectMeta>>(
                "object_meta",
                |m: &GameServer| { &m.object_meta },
                |m: &mut GameServer| { &mut m.object_meta },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameServer_Spec>>(
                "spec",
                |m: &GameServer| { &m.spec },
                |m: &mut GameServer| { &mut m.spec },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameServer_Status>>(
                "status",
                |m: &GameServer| { &m.status },
                |m: &mut GameServer| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameServer>(
                "GameServer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameServer {
        static instance: ::protobuf::rt::LazyV2<GameServer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameServer::new)
    }
}

impl ::protobuf::Clear for GameServer {
    fn clear(&mut self) {
        self.object_meta.clear();
        self.spec.clear();
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameServer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameServer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameServer_ObjectMeta {
    // message fields
    pub name: ::std::string::String,
    pub namespace: ::std::string::String,
    pub uid: ::std::string::String,
    pub resource_version: ::std::string::String,
    pub generation: i64,
    pub creation_timestamp: i64,
    pub deletion_timestamp: i64,
    pub annotations: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameServer_ObjectMeta {
    fn default() -> &'a GameServer_ObjectMeta {
        <GameServer_ObjectMeta as ::protobuf::Message>::default_instance()
    }
}

impl GameServer_ObjectMeta {
    pub fn new() -> GameServer_ObjectMeta {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string namespace = 2;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // string uid = 3;


    pub fn get_uid(&self) -> &str {
        &self.uid
    }
    pub fn clear_uid(&mut self) {
        self.uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: ::std::string::String) {
        self.uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uid(&mut self) -> &mut ::std::string::String {
        &mut self.uid
    }

    // Take field
    pub fn take_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uid, ::std::string::String::new())
    }

    // string resource_version = 4;


    pub fn get_resource_version(&self) -> &str {
        &self.resource_version
    }
    pub fn clear_resource_version(&mut self) {
        self.resource_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_version(&mut self, v: ::std::string::String) {
        self.resource_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_version(&mut self) -> &mut ::std::string::String {
        &mut self.resource_version
    }

    // Take field
    pub fn take_resource_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_version, ::std::string::String::new())
    }

    // int64 generation = 5;


    pub fn get_generation(&self) -> i64 {
        self.generation
    }
    pub fn clear_generation(&mut self) {
        self.generation = 0;
    }

    // Param is passed by value, moved
    pub fn set_generation(&mut self, v: i64) {
        self.generation = v;
    }

    // int64 creation_timestamp = 6;


    pub fn get_creation_timestamp(&self) -> i64 {
        self.creation_timestamp
    }
    pub fn clear_creation_timestamp(&mut self) {
        self.creation_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_creation_timestamp(&mut self, v: i64) {
        self.creation_timestamp = v;
    }

    // int64 deletion_timestamp = 7;


    pub fn get_deletion_timestamp(&self) -> i64 {
        self.deletion_timestamp
    }
    pub fn clear_deletion_timestamp(&mut self) {
        self.deletion_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_deletion_timestamp(&mut self, v: i64) {
        self.deletion_timestamp = v;
    }

    // repeated .agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry annotations = 8;


    pub fn get_annotations(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.annotations
    }
    pub fn clear_annotations(&mut self) {
        self.annotations.clear();
    }

    // Param is passed by value, moved
    pub fn set_annotations(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.annotations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_annotations(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.annotations
    }

    // Take field
    pub fn take_annotations(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.annotations, ::std::collections::HashMap::new())
    }

    // repeated .agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry labels = 9;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for GameServer_ObjectMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uid)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_version)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.generation = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.creation_timestamp = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deletion_timestamp = tmp;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.annotations)?;
                },
                9 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.namespace);
        }
        if !self.uid.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.uid);
        }
        if !self.resource_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.resource_version);
        }
        if self.generation != 0 {
            my_size += ::protobuf::rt::value_size(5, self.generation, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.creation_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.creation_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deletion_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(7, self.deletion_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.annotations);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(9, &self.labels);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(2, &self.namespace)?;
        }
        if !self.uid.is_empty() {
            os.write_string(3, &self.uid)?;
        }
        if !self.resource_version.is_empty() {
            os.write_string(4, &self.resource_version)?;
        }
        if self.generation != 0 {
            os.write_int64(5, self.generation)?;
        }
        if self.creation_timestamp != 0 {
            os.write_int64(6, self.creation_timestamp)?;
        }
        if self.deletion_timestamp != 0 {
            os.write_int64(7, self.deletion_timestamp)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.annotations, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(9, &self.labels, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameServer_ObjectMeta {
        GameServer_ObjectMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GameServer_ObjectMeta| { &m.name },
                |m: &mut GameServer_ObjectMeta| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &GameServer_ObjectMeta| { &m.namespace },
                |m: &mut GameServer_ObjectMeta| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uid",
                |m: &GameServer_ObjectMeta| { &m.uid },
                |m: &mut GameServer_ObjectMeta| { &mut m.uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_version",
                |m: &GameServer_ObjectMeta| { &m.resource_version },
                |m: &mut GameServer_ObjectMeta| { &mut m.resource_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "generation",
                |m: &GameServer_ObjectMeta| { &m.generation },
                |m: &mut GameServer_ObjectMeta| { &mut m.generation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "creation_timestamp",
                |m: &GameServer_ObjectMeta| { &m.creation_timestamp },
                |m: &mut GameServer_ObjectMeta| { &mut m.creation_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deletion_timestamp",
                |m: &GameServer_ObjectMeta| { &m.deletion_timestamp },
                |m: &mut GameServer_ObjectMeta| { &mut m.deletion_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "annotations",
                |m: &GameServer_ObjectMeta| { &m.annotations },
                |m: &mut GameServer_ObjectMeta| { &mut m.annotations },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &GameServer_ObjectMeta| { &m.labels },
                |m: &mut GameServer_ObjectMeta| { &mut m.labels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameServer_ObjectMeta>(
                "GameServer.ObjectMeta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameServer_ObjectMeta {
        static instance: ::protobuf::rt::LazyV2<GameServer_ObjectMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameServer_ObjectMeta::new)
    }
}

impl ::protobuf::Clear for GameServer_ObjectMeta {
    fn clear(&mut self) {
        self.name.clear();
        self.namespace.clear();
        self.uid.clear();
        self.resource_version.clear();
        self.generation = 0;
        self.creation_timestamp = 0;
        self.deletion_timestamp = 0;
        self.annotations.clear();
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameServer_ObjectMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameServer_ObjectMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameServer_Spec {
    // message fields
    pub health: ::protobuf::SingularPtrField<GameServer_Spec_Health>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameServer_Spec {
    fn default() -> &'a GameServer_Spec {
        <GameServer_Spec as ::protobuf::Message>::default_instance()
    }
}

impl GameServer_Spec {
    pub fn new() -> GameServer_Spec {
        ::std::default::Default::default()
    }

    // .agones.dev.sdk.GameServer.Spec.Health health = 1;


    pub fn get_health(&self) -> &GameServer_Spec_Health {
        self.health.as_ref().unwrap_or_else(|| <GameServer_Spec_Health as ::protobuf::Message>::default_instance())
    }
    pub fn clear_health(&mut self) {
        self.health.clear();
    }

    pub fn has_health(&self) -> bool {
        self.health.is_some()
    }

    // Param is passed by value, moved
    pub fn set_health(&mut self, v: GameServer_Spec_Health) {
        self.health = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_health(&mut self) -> &mut GameServer_Spec_Health {
        if self.health.is_none() {
            self.health.set_default();
        }
        self.health.as_mut().unwrap()
    }

    // Take field
    pub fn take_health(&mut self) -> GameServer_Spec_Health {
        self.health.take().unwrap_or_else(|| GameServer_Spec_Health::new())
    }
}

impl ::protobuf::Message for GameServer_Spec {
    fn is_initialized(&self) -> bool {
        for v in &self.health {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.health)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.health.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.health.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameServer_Spec {
        GameServer_Spec::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameServer_Spec_Health>>(
                "health",
                |m: &GameServer_Spec| { &m.health },
                |m: &mut GameServer_Spec| { &mut m.health },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameServer_Spec>(
                "GameServer.Spec",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameServer_Spec {
        static instance: ::protobuf::rt::LazyV2<GameServer_Spec> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameServer_Spec::new)
    }
}

impl ::protobuf::Clear for GameServer_Spec {
    fn clear(&mut self) {
        self.health.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameServer_Spec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameServer_Spec {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameServer_Spec_Health {
    // message fields
    pub disabled: bool,
    pub period_seconds: i32,
    pub failure_threshold: i32,
    pub initial_delay_seconds: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameServer_Spec_Health {
    fn default() -> &'a GameServer_Spec_Health {
        <GameServer_Spec_Health as ::protobuf::Message>::default_instance()
    }
}

impl GameServer_Spec_Health {
    pub fn new() -> GameServer_Spec_Health {
        ::std::default::Default::default()
    }

    // bool disabled = 1;


    pub fn get_disabled(&self) -> bool {
        self.disabled
    }
    pub fn clear_disabled(&mut self) {
        self.disabled = false;
    }

    // Param is passed by value, moved
    pub fn set_disabled(&mut self, v: bool) {
        self.disabled = v;
    }

    // int32 period_seconds = 2;


    pub fn get_period_seconds(&self) -> i32 {
        self.period_seconds
    }
    pub fn clear_period_seconds(&mut self) {
        self.period_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_period_seconds(&mut self, v: i32) {
        self.period_seconds = v;
    }

    // int32 failure_threshold = 3;


    pub fn get_failure_threshold(&self) -> i32 {
        self.failure_threshold
    }
    pub fn clear_failure_threshold(&mut self) {
        self.failure_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_failure_threshold(&mut self, v: i32) {
        self.failure_threshold = v;
    }

    // int32 initial_delay_seconds = 4;


    pub fn get_initial_delay_seconds(&self) -> i32 {
        self.initial_delay_seconds
    }
    pub fn clear_initial_delay_seconds(&mut self) {
        self.initial_delay_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial_delay_seconds(&mut self, v: i32) {
        self.initial_delay_seconds = v;
    }
}

impl ::protobuf::Message for GameServer_Spec_Health {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disabled = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.period_seconds = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.failure_threshold = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.initial_delay_seconds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.disabled != false {
            my_size += 2;
        }
        if self.period_seconds != 0 {
            my_size += ::protobuf::rt::value_size(2, self.period_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.failure_threshold != 0 {
            my_size += ::protobuf::rt::value_size(3, self.failure_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.initial_delay_seconds != 0 {
            my_size += ::protobuf::rt::value_size(4, self.initial_delay_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.disabled != false {
            os.write_bool(1, self.disabled)?;
        }
        if self.period_seconds != 0 {
            os.write_int32(2, self.period_seconds)?;
        }
        if self.failure_threshold != 0 {
            os.write_int32(3, self.failure_threshold)?;
        }
        if self.initial_delay_seconds != 0 {
            os.write_int32(4, self.initial_delay_seconds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameServer_Spec_Health {
        GameServer_Spec_Health::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disabled",
                |m: &GameServer_Spec_Health| { &m.disabled },
                |m: &mut GameServer_Spec_Health| { &mut m.disabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "period_seconds",
                |m: &GameServer_Spec_Health| { &m.period_seconds },
                |m: &mut GameServer_Spec_Health| { &mut m.period_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "failure_threshold",
                |m: &GameServer_Spec_Health| { &m.failure_threshold },
                |m: &mut GameServer_Spec_Health| { &mut m.failure_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "initial_delay_seconds",
                |m: &GameServer_Spec_Health| { &m.initial_delay_seconds },
                |m: &mut GameServer_Spec_Health| { &mut m.initial_delay_seconds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameServer_Spec_Health>(
                "GameServer.Spec.Health",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameServer_Spec_Health {
        static instance: ::protobuf::rt::LazyV2<GameServer_Spec_Health> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameServer_Spec_Health::new)
    }
}

impl ::protobuf::Clear for GameServer_Spec_Health {
    fn clear(&mut self) {
        self.disabled = false;
        self.period_seconds = 0;
        self.failure_threshold = 0;
        self.initial_delay_seconds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameServer_Spec_Health {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameServer_Spec_Health {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameServer_Status {
    // message fields
    pub state: ::std::string::String,
    pub address: ::std::string::String,
    pub ports: ::protobuf::RepeatedField<GameServer_Status_Port>,
    pub players: ::protobuf::SingularPtrField<GameServer_Status_PlayerStatus>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameServer_Status {
    fn default() -> &'a GameServer_Status {
        <GameServer_Status as ::protobuf::Message>::default_instance()
    }
}

impl GameServer_Status {
    pub fn new() -> GameServer_Status {
        ::std::default::Default::default()
    }

    // string state = 1;


    pub fn get_state(&self) -> &str {
        &self.state
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        &mut self.state
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state, ::std::string::String::new())
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // repeated .agones.dev.sdk.GameServer.Status.Port ports = 3;


    pub fn get_ports(&self) -> &[GameServer_Status_Port] {
        &self.ports
    }
    pub fn clear_ports(&mut self) {
        self.ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_ports(&mut self, v: ::protobuf::RepeatedField<GameServer_Status_Port>) {
        self.ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ports(&mut self) -> &mut ::protobuf::RepeatedField<GameServer_Status_Port> {
        &mut self.ports
    }

    // Take field
    pub fn take_ports(&mut self) -> ::protobuf::RepeatedField<GameServer_Status_Port> {
        ::std::mem::replace(&mut self.ports, ::protobuf::RepeatedField::new())
    }

    // .agones.dev.sdk.GameServer.Status.PlayerStatus players = 4;


    pub fn get_players(&self) -> &GameServer_Status_PlayerStatus {
        self.players.as_ref().unwrap_or_else(|| <GameServer_Status_PlayerStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_players(&mut self) {
        self.players.clear();
    }

    pub fn has_players(&self) -> bool {
        self.players.is_some()
    }

    // Param is passed by value, moved
    pub fn set_players(&mut self, v: GameServer_Status_PlayerStatus) {
        self.players = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_players(&mut self) -> &mut GameServer_Status_PlayerStatus {
        if self.players.is_none() {
            self.players.set_default();
        }
        self.players.as_mut().unwrap()
    }

    // Take field
    pub fn take_players(&mut self) -> GameServer_Status_PlayerStatus {
        self.players.take().unwrap_or_else(|| GameServer_Status_PlayerStatus::new())
    }
}

impl ::protobuf::Message for GameServer_Status {
    fn is_initialized(&self) -> bool {
        for v in &self.ports {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.players {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ports)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.players)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.state.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.state);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        for value in &self.ports {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.players.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.state.is_empty() {
            os.write_string(1, &self.state)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        for v in &self.ports {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.players.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameServer_Status {
        GameServer_Status::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state",
                |m: &GameServer_Status| { &m.state },
                |m: &mut GameServer_Status| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &GameServer_Status| { &m.address },
                |m: &mut GameServer_Status| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameServer_Status_Port>>(
                "ports",
                |m: &GameServer_Status| { &m.ports },
                |m: &mut GameServer_Status| { &mut m.ports },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameServer_Status_PlayerStatus>>(
                "players",
                |m: &GameServer_Status| { &m.players },
                |m: &mut GameServer_Status| { &mut m.players },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameServer_Status>(
                "GameServer.Status",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameServer_Status {
        static instance: ::protobuf::rt::LazyV2<GameServer_Status> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameServer_Status::new)
    }
}

impl ::protobuf::Clear for GameServer_Status {
    fn clear(&mut self) {
        self.state.clear();
        self.address.clear();
        self.ports.clear();
        self.players.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameServer_Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameServer_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameServer_Status_Port {
    // message fields
    pub name: ::std::string::String,
    pub port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameServer_Status_Port {
    fn default() -> &'a GameServer_Status_Port {
        <GameServer_Status_Port as ::protobuf::Message>::default_instance()
    }
}

impl GameServer_Status_Port {
    pub fn new() -> GameServer_Status_Port {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 port = 2;


    pub fn get_port(&self) -> i32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }
}

impl ::protobuf::Message for GameServer_Status_Port {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.port != 0 {
            os.write_int32(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameServer_Status_Port {
        GameServer_Status_Port::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GameServer_Status_Port| { &m.name },
                |m: &mut GameServer_Status_Port| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "port",
                |m: &GameServer_Status_Port| { &m.port },
                |m: &mut GameServer_Status_Port| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameServer_Status_Port>(
                "GameServer.Status.Port",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameServer_Status_Port {
        static instance: ::protobuf::rt::LazyV2<GameServer_Status_Port> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameServer_Status_Port::new)
    }
}

impl ::protobuf::Clear for GameServer_Status_Port {
    fn clear(&mut self) {
        self.name.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameServer_Status_Port {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameServer_Status_Port {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameServer_Status_PlayerStatus {
    // message fields
    pub count: i64,
    pub capacity: i64,
    pub ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameServer_Status_PlayerStatus {
    fn default() -> &'a GameServer_Status_PlayerStatus {
        <GameServer_Status_PlayerStatus as ::protobuf::Message>::default_instance()
    }
}

impl GameServer_Status_PlayerStatus {
    pub fn new() -> GameServer_Status_PlayerStatus {
        ::std::default::Default::default()
    }

    // int64 count = 1;


    pub fn get_count(&self) -> i64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i64) {
        self.count = v;
    }

    // int64 capacity = 2;


    pub fn get_capacity(&self) -> i64 {
        self.capacity
    }
    pub fn clear_capacity(&mut self) {
        self.capacity = 0;
    }

    // Param is passed by value, moved
    pub fn set_capacity(&mut self, v: i64) {
        self.capacity = v;
    }

    // repeated string ids = 3;


    pub fn get_ids(&self) -> &[::std::string::String] {
        &self.ids
    }
    pub fn clear_ids(&mut self) {
        self.ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.ids
    }

    // Take field
    pub fn take_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GameServer_Status_PlayerStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.capacity = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.capacity != 0 {
            my_size += ::protobuf::rt::value_size(2, self.capacity, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.ids {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_int64(1, self.count)?;
        }
        if self.capacity != 0 {
            os.write_int64(2, self.capacity)?;
        }
        for v in &self.ids {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameServer_Status_PlayerStatus {
        GameServer_Status_PlayerStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "count",
                |m: &GameServer_Status_PlayerStatus| { &m.count },
                |m: &mut GameServer_Status_PlayerStatus| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "capacity",
                |m: &GameServer_Status_PlayerStatus| { &m.capacity },
                |m: &mut GameServer_Status_PlayerStatus| { &mut m.capacity },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ids",
                |m: &GameServer_Status_PlayerStatus| { &m.ids },
                |m: &mut GameServer_Status_PlayerStatus| { &mut m.ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameServer_Status_PlayerStatus>(
                "GameServer.Status.PlayerStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameServer_Status_PlayerStatus {
        static instance: ::protobuf::rt::LazyV2<GameServer_Status_PlayerStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameServer_Status_PlayerStatus::new)
    }
}

impl ::protobuf::Clear for GameServer_Status_PlayerStatus {
    fn clear(&mut self) {
        self.count = 0;
        self.capacity = 0;
        self.ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameServer_Status_PlayerStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameServer_Status_PlayerStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tsdk.proto\x12\x0eagones.dev.sdk\x1a\x1cgoogle/api/annotations.proto\
    \"\x07\n\x05Empty\"2\n\x08KeyValue\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"$\n\x08Duration\
    \x12\x18\n\x07seconds\x18\x01\x20\x01(\x03R\x07seconds\"\x9f\n\n\nGameSe\
    rver\x12F\n\x0bobject_meta\x18\x01\x20\x01(\x0b2%.agones.dev.sdk.GameSer\
    ver.ObjectMetaR\nobjectMeta\x123\n\x04spec\x18\x02\x20\x01(\x0b2\x1f.ago\
    nes.dev.sdk.GameServer.SpecR\x04spec\x129\n\x06status\x18\x03\x20\x01(\
    \x0b2!.agones.dev.sdk.GameServer.StatusR\x06status\x1a\x99\x04\n\nObject\
    Meta\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1c\n\tnamespace\
    \x18\x02\x20\x01(\tR\tnamespace\x12\x10\n\x03uid\x18\x03\x20\x01(\tR\x03\
    uid\x12)\n\x10resource_version\x18\x04\x20\x01(\tR\x0fresourceVersion\
    \x12\x1e\n\ngeneration\x18\x05\x20\x01(\x03R\ngeneration\x12-\n\x12creat\
    ion_timestamp\x18\x06\x20\x01(\x03R\x11creationTimestamp\x12-\n\x12delet\
    ion_timestamp\x18\x07\x20\x01(\x03R\x11deletionTimestamp\x12X\n\x0bannot\
    ations\x18\x08\x20\x03(\x0b26.agones.dev.sdk.GameServer.ObjectMeta.Annot\
    ationsEntryR\x0bannotations\x12I\n\x06labels\x18\t\x20\x03(\x0b21.agones\
    .dev.sdk.GameServer.ObjectMeta.LabelsEntryR\x06labels\x1a>\n\x10Annotati\
    onsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a9\n\x0bLabelsEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\x1a\xf5\x01\n\x04Spec\x12>\n\x06health\x18\x01\x20\
    \x01(\x0b2&.agones.dev.sdk.GameServer.Spec.HealthR\x06health\x1a\xac\x01\
    \n\x06Health\x12\x1a\n\x08disabled\x18\x01\x20\x01(\x08R\x08disabled\x12\
    %\n\x0eperiod_seconds\x18\x02\x20\x01(\x05R\rperiodSeconds\x12+\n\x11fai\
    lure_threshold\x18\x03\x20\x01(\x05R\x10failureThreshold\x122\n\x15initi\
    al_delay_seconds\x18\x04\x20\x01(\x05R\x13initialDelaySeconds\x1a\xc4\
    \x02\n\x06Status\x12\x14\n\x05state\x18\x01\x20\x01(\tR\x05state\x12\x18\
    \n\x07address\x18\x02\x20\x01(\tR\x07address\x12<\n\x05ports\x18\x03\x20\
    \x03(\x0b2&.agones.dev.sdk.GameServer.Status.PortR\x05ports\x12H\n\x07pl\
    ayers\x18\x04\x20\x01(\x0b2..agones.dev.sdk.GameServer.Status.PlayerStat\
    usR\x07players\x1a.\n\x04Port\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04n\
    ame\x12\x12\n\x04port\x18\x02\x20\x01(\x05R\x04port\x1aR\n\x0cPlayerStat\
    us\x12\x14\n\x05count\x18\x01\x20\x01(\x03R\x05count\x12\x1a\n\x08capaci\
    ty\x18\x02\x20\x01(\x03R\x08capacity\x12\x10\n\x03ids\x18\x03\x20\x03(\t\
    R\x03ids2\x86\x06\n\x03SDK\x12H\n\x05Ready\x12\x15.agones.dev.sdk.Empty\
    \x1a\x15.agones.dev.sdk.Empty\"\x11\x82\xd3\xe4\x93\x02\x0b\"\x06/ready:\
    \x01*\x12N\n\x08Allocate\x12\x15.agones.dev.sdk.Empty\x1a\x15.agones.dev\
    .sdk.Empty\"\x14\x82\xd3\xe4\x93\x02\x0e\"\t/allocate:\x01*\x12N\n\x08Sh\
    utdown\x12\x15.agones.dev.sdk.Empty\x1a\x15.agones.dev.sdk.Empty\"\x14\
    \x82\xd3\xe4\x93\x02\x0e\"\t/shutdown:\x01*\x12L\n\x06Health\x12\x15.ago\
    nes.dev.sdk.Empty\x1a\x15.agones.dev.sdk.Empty\"\x12\x82\xd3\xe4\x93\x02\
    \x0c\"\x07/health:\x01*(\x01\x12W\n\rGetGameServer\x12\x15.agones.dev.sd\
    k.Empty\x1a\x1a.agones.dev.sdk.GameServer\"\x13\x82\xd3\xe4\x93\x02\r\
    \x12\x0b/gameserver\x12a\n\x0fWatchGameServer\x12\x15.agones.dev.sdk.Emp\
    ty\x1a\x1a.agones.dev.sdk.GameServer\"\x19\x82\xd3\xe4\x93\x02\x13\x12\
    \x11/watch/gameserver0\x01\x12W\n\x08SetLabel\x12\x18.agones.dev.sdk.Key\
    Value\x1a\x15.agones.dev.sdk.Empty\"\x1a\x82\xd3\xe4\x93\x02\x14\x1a\x0f\
    /metadata/label:\x01*\x12a\n\rSetAnnotation\x12\x18.agones.dev.sdk.KeyVa\
    lue\x1a\x15.agones.dev.sdk.Empty\"\x1f\x82\xd3\xe4\x93\x02\x19\x1a\x14/m\
    etadata/annotation:\x01*\x12O\n\x07Reserve\x12\x18.agones.dev.sdk.Durati\
    on\x1a\x15.agones.dev.sdk.Empty\"\x13\x82\xd3\xe4\x93\x02\r\"\x08/reserv\
    e:\x01*B\x05Z\x03sdkJ\xf3(\n\x07\x12\x05\x0e\0\xa1\x01\x01\n\xd1\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xc6\x04\x20Copyright\x202017\x20Google\x20LL\
    C\x20All\x20Rights\x20Reserved.\n\n\x20Licensed\x20under\x20the\x20Apach\
    e\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20L\
    icense\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICEN\
    SE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agr\
    eed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x17\
    \n\x08\n\x01\x08\x12\x03\x11\0\x1a\n\t\n\x02\x08\x0b\x12\x03\x11\0\x1a\n\
    \t\n\x02\x03\0\x12\x03\x13\0&\nM\n\x02\x06\0\x12\x04\x16\0Y\x01\x1aA\x20\
    SDK\x20service\x20to\x20be\x20used\x20in\x20the\x20GameServer\x20SDK\x20\
    to\x20the\x20Pod\x20Sidecar\n\n\n\n\x03\x06\0\x01\x12\x03\x16\x08\x0b\n1\
    \n\x04\x06\0\x02\0\x12\x04\x18\x04\x1d\x05\x1a#\x20Call\x20when\x20the\
    \x20GameServer\x20is\x20ready\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x18\
    \x08\r\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x18\x0f\x14\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x18\x1f$\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x19\x08\
    \x1c\n\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x19\x08\x1c\n\n6\
    \n\x04\x06\0\x02\x01\x12\x04\x20\x04%\x05\x1a(\x20Call\x20to\x20self\x20\
    Allocation\x20the\x20GameServer\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    \x20\x08\x10\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x20\x11\x16\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x20!&\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\
    !\x08$\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04!\x08$\n\n9\n\
    \x04\x06\0\x02\x02\x12\x04(\x04-\x05\x1a+\x20Call\x20when\x20the\x20Game\
    Server\x20is\x20shutting\x20down\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    (\x08\x10\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03(\x12\x17\n\x0c\n\x05\x06\
    \0\x02\x02\x03\x12\x03(\"'\n\r\n\x05\x06\0\x02\x02\x04\x12\x04)\x08,\n\n\
    \x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04)\x08,\n\nW\n\x04\x06\0\
    \x02\x03\x12\x04/\x044\x05\x1aI\x20Send\x20a\x20Empty\x20every\x20d\x20D\
    uration\x20to\x20declare\x20that\x20this\x20GameSever\x20is\x20healthy\n\
    \n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03/\x08\x0e\n\x0c\n\x05\x06\0\x02\
    \x03\x05\x12\x03/\x10\x16\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03/\x17\x1c\
    \n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03/',\n\r\n\x05\x06\0\x02\x03\x04\
    \x12\x040\x083\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x040\
    \x083\x12\n4\n\x04\x06\0\x02\x04\x12\x046\x04:\x05\x1a&\x20Retrieve\x20t\
    he\x20current\x20GameServer\x20data\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\
    \x036\x08\x15\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x036\x17\x1c\n\x0c\n\x05\
    \x06\0\x02\x04\x03\x12\x036'1\n\r\n\x05\x06\0\x02\x04\x04\x12\x047\x089\
    \n\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x047\x089\n\nJ\n\x04\
    \x06\0\x02\x05\x12\x04<\x04@\x05\x1a<\x20Send\x20GameServer\x20details\
    \x20whenever\x20the\x20GameServer\x20is\x20updated\n\n\x0c\n\x05\x06\0\
    \x02\x05\x01\x12\x03<\x08\x17\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03<\x19\
    \x1e\n\x0c\n\x05\x06\0\x02\x05\x06\x12\x03<)/\n\x0c\n\x05\x06\0\x02\x05\
    \x03\x12\x03<0:\n\r\n\x05\x06\0\x02\x05\x04\x12\x04=\x08?\n\n\x11\n\t\
    \x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04=\x08?\n\n@\n\x04\x06\0\x02\x06\
    \x12\x04C\x04H\x05\x1a2\x20Apply\x20a\x20Label\x20to\x20the\x20backing\
    \x20GameServer\x20metadata\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03C\x08\
    \x10\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03C\x11\x19\n\x0c\n\x05\x06\0\
    \x02\x06\x03\x12\x03C$)\n\r\n\x05\x06\0\x02\x06\x04\x12\x04D\x08G\x12\n\
    \x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x04D\x08G\x12\nE\n\x04\x06\
    \0\x02\x07\x12\x04K\x04P\x05\x1a7\x20Apply\x20a\x20Annotation\x20to\x20t\
    he\x20backing\x20GameServer\x20metadata\n\n\x0c\n\x05\x06\0\x02\x07\x01\
    \x12\x03K\x08\x15\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03K\x16\x1e\n\x0c\n\
    \x05\x06\0\x02\x07\x03\x12\x03K).\n\r\n\x05\x06\0\x02\x07\x04\x12\x04L\
    \x08O\x12\n\x11\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\x04L\x08O\x12\nG\
    \n\x04\x06\0\x02\x08\x12\x04S\x04X\x05\x1a9\x20Marks\x20the\x20GameServe\
    r\x20as\x20the\x20Reserved\x20state\x20for\x20Duration\n\n\x0c\n\x05\x06\
    \0\x02\x08\x01\x12\x03S\x08\x0f\n\x0c\n\x05\x06\0\x02\x08\x02\x12\x03S\
    \x10\x18\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03S#(\n\r\n\x05\x06\0\x02\
    \x08\x04\x12\x04T\x08W\n\n\x11\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\
    \x04T\x08W\n\n\x18\n\x02\x04\0\x12\x04\\\0]\x01\x1a\x0c\x20I\x20am\x20Em\
    pty\n\n\n\n\x03\x04\0\x01\x12\x03\\\x08\r\n\x1e\n\x02\x04\x01\x12\x04`\0\
    c\x01\x1a\x12\x20Key,\x20Value\x20entry\n\n\n\n\x03\x04\x01\x01\x12\x03`\
    \x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03a\x04\x13\n\r\n\x05\x04\x01\
    \x02\0\x04\x12\x04a\x04`\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03a\x04\
    \n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03a\x0b\x0e\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03a\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\x12\x03b\x04\x15\
    \n\r\n\x05\x04\x01\x02\x01\x04\x12\x04b\x04a\x13\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03b\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03b\x0b\x10\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03b\x13\x14\n'\n\x02\x04\x02\x12\
    \x04f\0h\x01\x1a\x1b\x20time\x20duration,\x20in\x20seconds\n\n\n\n\x03\
    \x04\x02\x01\x12\x03f\x08\x10\n\x0b\n\x04\x04\x02\x02\0\x12\x03g\x04\x16\
    \n\r\n\x05\x04\x02\x02\0\x04\x12\x04g\x04f\x12\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03g\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03g\n\x11\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03g\x14\x15\n\xa3\x01\n\x02\x04\x03\x12\x05m\
    \0\xa1\x01\x01\x1a\x95\x01\x20A\x20GameServer\x20Custom\x20Resource\x20D\
    efinition\x20object\n\x20We\x20will\x20only\x20export\x20those\x20resour\
    ces\x20that\x20make\x20the\x20most\n\x20sense.\x20Can\x20always\x20expan\
    d\x20to\x20more\x20as\x20needed.\n\n\n\n\x03\x04\x03\x01\x12\x03m\x08\
    \x12\n\x0b\n\x04\x04\x03\x02\0\x12\x03n\x04\x1f\n\r\n\x05\x04\x03\x02\0\
    \x04\x12\x04n\x04m\x14\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03n\x04\x0e\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03n\x0f\x1a\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03n\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x01\x12\x03o\x04\x12\n\r\n\
    \x05\x04\x03\x02\x01\x04\x12\x04o\x04n\x1f\n\x0c\n\x05\x04\x03\x02\x01\
    \x06\x12\x03o\x04\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03o\t\r\n\x0c\
    \n\x05\x04\x03\x02\x01\x03\x12\x03o\x10\x11\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03p\x04\x16\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04p\x04o\x12\n\x0c\
    \n\x05\x04\x03\x02\x02\x06\x12\x03p\x04\n\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03p\x0b\x11\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03p\x14\x15\n\
    =\n\x04\x04\x03\x03\0\x12\x04s\x04\x7f\x05\x1a/\x20representation\x20of\
    \x20the\x20K8s\x20ObjectMeta\x20resource\n\n\x0c\n\x05\x04\x03\x03\0\x01\
    \x12\x03s\x0c\x16\n\r\n\x06\x04\x03\x03\0\x02\0\x12\x03t\x08\x18\n\x0f\n\
    \x07\x04\x03\x03\0\x02\0\x04\x12\x04t\x08s\x18\n\x0e\n\x07\x04\x03\x03\0\
    \x02\0\x05\x12\x03t\x08\x0e\n\x0e\n\x07\x04\x03\x03\0\x02\0\x01\x12\x03t\
    \x0f\x13\n\x0e\n\x07\x04\x03\x03\0\x02\0\x03\x12\x03t\x16\x17\n\r\n\x06\
    \x04\x03\x03\0\x02\x01\x12\x03u\x08\x1d\n\x0f\n\x07\x04\x03\x03\0\x02\
    \x01\x04\x12\x04u\x08t\x18\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x05\x12\x03\
    u\x08\x0e\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x01\x12\x03u\x0f\x18\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x01\x03\x12\x03u\x1b\x1c\n\r\n\x06\x04\x03\x03\0\
    \x02\x02\x12\x03v\x08\x17\n\x0f\n\x07\x04\x03\x03\0\x02\x02\x04\x12\x04v\
    \x08u\x1d\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x05\x12\x03v\x08\x0e\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x02\x01\x12\x03v\x0f\x12\n\x0e\n\x07\x04\x03\x03\
    \0\x02\x02\x03\x12\x03v\x15\x16\n\r\n\x06\x04\x03\x03\0\x02\x03\x12\x03w\
    \x08$\n\x0f\n\x07\x04\x03\x03\0\x02\x03\x04\x12\x04w\x08v\x17\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x03\x05\x12\x03w\x08\x0e\n\x0e\n\x07\x04\x03\x03\
    \0\x02\x03\x01\x12\x03w\x0f\x1f\n\x0e\n\x07\x04\x03\x03\0\x02\x03\x03\
    \x12\x03w\"#\n\r\n\x06\x04\x03\x03\0\x02\x04\x12\x03x\x08\x1d\n\x0f\n\
    \x07\x04\x03\x03\0\x02\x04\x04\x12\x04x\x08w$\n\x0e\n\x07\x04\x03\x03\0\
    \x02\x04\x05\x12\x03x\x08\r\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x01\x12\
    \x03x\x0e\x18\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x03\x12\x03x\x1b\x1c\n<\
    \n\x06\x04\x03\x03\0\x02\x05\x12\x03z\x08%\x1a-\x20timestamp\x20is\x20in\
    \x20Epoch\x20format,\x20unit:\x20seconds\n\n\x0f\n\x07\x04\x03\x03\0\x02\
    \x05\x04\x12\x04z\x08x\x1d\n\x0e\n\x07\x04\x03\x03\0\x02\x05\x05\x12\x03\
    z\x08\r\n\x0e\n\x07\x04\x03\x03\0\x02\x05\x01\x12\x03z\x0e\x20\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x05\x03\x12\x03z#$\nK\n\x06\x04\x03\x03\0\x02\x06\
    \x12\x03|\x08%\x1a<\x20optional\x20deletion\x20timestamp\x20in\x20Epoch\
    \x20format,\x20unit:\x20seconds\n\n\x0f\n\x07\x04\x03\x03\0\x02\x06\x04\
    \x12\x04|\x08z%\n\x0e\n\x07\x04\x03\x03\0\x02\x06\x05\x12\x03|\x08\r\n\
    \x0e\n\x07\x04\x03\x03\0\x02\x06\x01\x12\x03|\x0e\x20\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x06\x03\x12\x03|#$\n\r\n\x06\x04\x03\x03\0\x02\x07\x12\
    \x03}\x08,\n\x0f\n\x07\x04\x03\x03\0\x02\x07\x04\x12\x04}\x08|%\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x07\x06\x12\x03}\x08\x1b\n\x0e\n\x07\x04\x03\x03\
    \0\x02\x07\x01\x12\x03}\x1c'\n\x0e\n\x07\x04\x03\x03\0\x02\x07\x03\x12\
    \x03}*+\n\r\n\x06\x04\x03\x03\0\x02\x08\x12\x03~\x08'\n\x0f\n\x07\x04\
    \x03\x03\0\x02\x08\x04\x12\x04~\x08},\n\x0e\n\x07\x04\x03\x03\0\x02\x08\
    \x06\x12\x03~\x08\x1b\n\x0e\n\x07\x04\x03\x03\0\x02\x08\x01\x12\x03~\x1c\
    \"\n\x0e\n\x07\x04\x03\x03\0\x02\x08\x03\x12\x03~%&\n\x0e\n\x04\x04\x03\
    \x03\x01\x12\x06\x81\x01\x04\x8a\x01\x05\n\r\n\x05\x04\x03\x03\x01\x01\
    \x12\x04\x81\x01\x0c\x10\n\x0e\n\x06\x04\x03\x03\x01\x02\0\x12\x04\x82\
    \x01\x08\x1a\n\x11\n\x07\x04\x03\x03\x01\x02\0\x04\x12\x06\x82\x01\x08\
    \x81\x01\x12\n\x0f\n\x07\x04\x03\x03\x01\x02\0\x06\x12\x04\x82\x01\x08\
    \x0e\n\x0f\n\x07\x04\x03\x03\x01\x02\0\x01\x12\x04\x82\x01\x0f\x15\n\x0f\
    \n\x07\x04\x03\x03\x01\x02\0\x03\x12\x04\x82\x01\x18\x19\n\x10\n\x06\x04\
    \x03\x03\x01\x03\0\x12\x06\x84\x01\x08\x89\x01\t\n\x0f\n\x07\x04\x03\x03\
    \x01\x03\0\x01\x12\x04\x84\x01\x10\x16\n\x10\n\x08\x04\x03\x03\x01\x03\0\
    \x02\0\x12\x04\x85\x01\x0c\x1e\n\x13\n\t\x04\x03\x03\x01\x03\0\x02\0\x04\
    \x12\x06\x85\x01\x0c\x84\x01\x18\n\x11\n\t\x04\x03\x03\x01\x03\0\x02\0\
    \x05\x12\x04\x85\x01\x0c\x10\n\x11\n\t\x04\x03\x03\x01\x03\0\x02\0\x01\
    \x12\x04\x85\x01\x11\x19\n\x11\n\t\x04\x03\x03\x01\x03\0\x02\0\x03\x12\
    \x04\x85\x01\x1c\x1d\n\x10\n\x08\x04\x03\x03\x01\x03\0\x02\x01\x12\x04\
    \x86\x01\x0c%\n\x13\n\t\x04\x03\x03\x01\x03\0\x02\x01\x04\x12\x06\x86\
    \x01\x0c\x85\x01\x1e\n\x11\n\t\x04\x03\x03\x01\x03\0\x02\x01\x05\x12\x04\
    \x86\x01\x0c\x11\n\x11\n\t\x04\x03\x03\x01\x03\0\x02\x01\x01\x12\x04\x86\
    \x01\x12\x20\n\x11\n\t\x04\x03\x03\x01\x03\0\x02\x01\x03\x12\x04\x86\x01\
    #$\n\x10\n\x08\x04\x03\x03\x01\x03\0\x02\x02\x12\x04\x87\x01\x0c(\n\x13\
    \n\t\x04\x03\x03\x01\x03\0\x02\x02\x04\x12\x06\x87\x01\x0c\x86\x01%\n\
    \x11\n\t\x04\x03\x03\x01\x03\0\x02\x02\x05\x12\x04\x87\x01\x0c\x11\n\x11\
    \n\t\x04\x03\x03\x01\x03\0\x02\x02\x01\x12\x04\x87\x01\x12#\n\x11\n\t\
    \x04\x03\x03\x01\x03\0\x02\x02\x03\x12\x04\x87\x01&'\n\x10\n\x08\x04\x03\
    \x03\x01\x03\0\x02\x03\x12\x04\x88\x01\x0c,\n\x13\n\t\x04\x03\x03\x01\
    \x03\0\x02\x03\x04\x12\x06\x88\x01\x0c\x87\x01(\n\x11\n\t\x04\x03\x03\
    \x01\x03\0\x02\x03\x05\x12\x04\x88\x01\x0c\x11\n\x11\n\t\x04\x03\x03\x01\
    \x03\0\x02\x03\x01\x12\x04\x88\x01\x12'\n\x11\n\t\x04\x03\x03\x01\x03\0\
    \x02\x03\x03\x12\x04\x88\x01*+\n\x0e\n\x04\x04\x03\x03\x02\x12\x06\x8c\
    \x01\x04\xa0\x01\x05\n\r\n\x05\x04\x03\x03\x02\x01\x12\x04\x8c\x01\x0c\
    \x12\n\x10\n\x06\x04\x03\x03\x02\x03\0\x12\x06\x8d\x01\x08\x90\x01\t\n\
    \x0f\n\x07\x04\x03\x03\x02\x03\0\x01\x12\x04\x8d\x01\x10\x14\n\x10\n\x08\
    \x04\x03\x03\x02\x03\0\x02\0\x12\x04\x8e\x01\x0c\x1c\n\x13\n\t\x04\x03\
    \x03\x02\x03\0\x02\0\x04\x12\x06\x8e\x01\x0c\x8d\x01\x16\n\x11\n\t\x04\
    \x03\x03\x02\x03\0\x02\0\x05\x12\x04\x8e\x01\x0c\x12\n\x11\n\t\x04\x03\
    \x03\x02\x03\0\x02\0\x01\x12\x04\x8e\x01\x13\x17\n\x11\n\t\x04\x03\x03\
    \x02\x03\0\x02\0\x03\x12\x04\x8e\x01\x1a\x1b\n\x10\n\x08\x04\x03\x03\x02\
    \x03\0\x02\x01\x12\x04\x8f\x01\x0c\x1b\n\x13\n\t\x04\x03\x03\x02\x03\0\
    \x02\x01\x04\x12\x06\x8f\x01\x0c\x8e\x01\x1c\n\x11\n\t\x04\x03\x03\x02\
    \x03\0\x02\x01\x05\x12\x04\x8f\x01\x0c\x11\n\x11\n\t\x04\x03\x03\x02\x03\
    \0\x02\x01\x01\x12\x04\x8f\x01\x12\x16\n\x11\n\t\x04\x03\x03\x02\x03\0\
    \x02\x01\x03\x12\x04\x8f\x01\x19\x1a\n?\n\x06\x04\x03\x03\x02\x03\x01\
    \x12\x06\x93\x01\x08\x97\x01\t\x1a-\x20[Stage:Alpha]\n\x20[FeatureFlag:P\
    layerTracking]\n\n\x0f\n\x07\x04\x03\x03\x02\x03\x01\x01\x12\x04\x93\x01\
    \x10\x1c\n\x10\n\x08\x04\x03\x03\x02\x03\x01\x02\0\x12\x04\x94\x01\x0c\
    \x1c\n\x13\n\t\x04\x03\x03\x02\x03\x01\x02\0\x04\x12\x06\x94\x01\x0c\x93\
    \x01\x1e\n\x11\n\t\x04\x03\x03\x02\x03\x01\x02\0\x05\x12\x04\x94\x01\x0c\
    \x11\n\x11\n\t\x04\x03\x03\x02\x03\x01\x02\0\x01\x12\x04\x94\x01\x12\x17\
    \n\x11\n\t\x04\x03\x03\x02\x03\x01\x02\0\x03\x12\x04\x94\x01\x1a\x1b\n\
    \x10\n\x08\x04\x03\x03\x02\x03\x01\x02\x01\x12\x04\x95\x01\x0c\x1f\n\x13\
    \n\t\x04\x03\x03\x02\x03\x01\x02\x01\x04\x12\x06\x95\x01\x0c\x94\x01\x1c\
    \n\x11\n\t\x04\x03\x03\x02\x03\x01\x02\x01\x05\x12\x04\x95\x01\x0c\x11\n\
    \x11\n\t\x04\x03\x03\x02\x03\x01\x02\x01\x01\x12\x04\x95\x01\x12\x1a\n\
    \x11\n\t\x04\x03\x03\x02\x03\x01\x02\x01\x03\x12\x04\x95\x01\x1d\x1e\n\
    \x10\n\x08\x04\x03\x03\x02\x03\x01\x02\x02\x12\x04\x96\x01\x0c$\n\x11\n\
    \t\x04\x03\x03\x02\x03\x01\x02\x02\x04\x12\x04\x96\x01\x0c\x14\n\x11\n\t\
    \x04\x03\x03\x02\x03\x01\x02\x02\x05\x12\x04\x96\x01\x15\x1b\n\x11\n\t\
    \x04\x03\x03\x02\x03\x01\x02\x02\x01\x12\x04\x96\x01\x1c\x1f\n\x11\n\t\
    \x04\x03\x03\x02\x03\x01\x02\x02\x03\x12\x04\x96\x01\"#\n\x0e\n\x06\x04\
    \x03\x03\x02\x02\0\x12\x04\x99\x01\x08\x19\n\x11\n\x07\x04\x03\x03\x02\
    \x02\0\x04\x12\x06\x99\x01\x08\x97\x01\t\n\x0f\n\x07\x04\x03\x03\x02\x02\
    \0\x05\x12\x04\x99\x01\x08\x0e\n\x0f\n\x07\x04\x03\x03\x02\x02\0\x01\x12\
    \x04\x99\x01\x0f\x14\n\x0f\n\x07\x04\x03\x03\x02\x02\0\x03\x12\x04\x99\
    \x01\x17\x18\n\x0e\n\x06\x04\x03\x03\x02\x02\x01\x12\x04\x9a\x01\x08\x1b\
    \n\x11\n\x07\x04\x03\x03\x02\x02\x01\x04\x12\x06\x9a\x01\x08\x99\x01\x19\
    \n\x0f\n\x07\x04\x03\x03\x02\x02\x01\x05\x12\x04\x9a\x01\x08\x0e\n\x0f\n\
    \x07\x04\x03\x03\x02\x02\x01\x01\x12\x04\x9a\x01\x0f\x16\n\x0f\n\x07\x04\
    \x03\x03\x02\x02\x01\x03\x12\x04\x9a\x01\x19\x1a\n\x0e\n\x06\x04\x03\x03\
    \x02\x02\x02\x12\x04\x9b\x01\x08\x20\n\x0f\n\x07\x04\x03\x03\x02\x02\x02\
    \x04\x12\x04\x9b\x01\x08\x10\n\x0f\n\x07\x04\x03\x03\x02\x02\x02\x06\x12\
    \x04\x9b\x01\x11\x15\n\x0f\n\x07\x04\x03\x03\x02\x02\x02\x01\x12\x04\x9b\
    \x01\x16\x1b\n\x0f\n\x07\x04\x03\x03\x02\x02\x02\x03\x12\x04\x9b\x01\x1e\
    \x1f\n=\n\x06\x04\x03\x03\x02\x02\x03\x12\x04\x9f\x01\x08!\x1a-\x20[Stag\
    e:Alpha]\n\x20[FeatureFlag:PlayerTracking]\n\n\x11\n\x07\x04\x03\x03\x02\
    \x02\x03\x04\x12\x06\x9f\x01\x08\x9b\x01\x20\n\x0f\n\x07\x04\x03\x03\x02\
    \x02\x03\x06\x12\x04\x9f\x01\x08\x14\n\x0f\n\x07\x04\x03\x03\x02\x02\x03\
    \x01\x12\x04\x9f\x01\x15\x1c\n\x0f\n\x07\x04\x03\x03\x02\x02\x03\x03\x12\
    \x04\x9f\x01\x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
